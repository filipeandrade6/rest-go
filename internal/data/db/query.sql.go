// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_id, name, email, roles, password_hash, date_created, date_updated
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING user_id, name, email, roles, password_hash, date_created, date_updated
`

type CreateUserParams struct {
	UserID       uuid.UUID
	Name         sql.NullString
	Email        sql.NullString
	Roles        []string
	PasswordHash sql.NullString
	DateCreated  sql.NullTime
	DateUpdated  sql.NullTime
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.Name,
		arg.Email,
		arg.Roles,
		arg.PasswordHash,
		arg.DateCreated,
		arg.DateUpdated,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Roles,
		&i.PasswordHash,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE user_id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, userID)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, name, email, roles, password_hash, date_created, date_updated FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Roles,
		&i.PasswordHash,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, name, email, roles, password_hash, date_created, date_updated FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.Name,
		&i.Email,
		&i.Roles,
		&i.PasswordHash,
		&i.DateCreated,
		&i.DateUpdated,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT user_id, name, email, roles, password_hash, date_created, date_updated FROM users
ORDER BY name OFFSET $1 ROWS
FETCH NEXT $2 ROWS ONLY
`

type ListUsersParams struct {
	Offset int32
	Limit  int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.Name,
			&i.Email,
			&i.Roles,
			&i.PasswordHash,
			&i.DateCreated,
			&i.DateUpdated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
